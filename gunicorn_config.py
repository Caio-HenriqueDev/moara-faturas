# Configura√ß√£o Gunicorn para Hostinger
# Sistema de Gest√£o de Faturas - Moara Energia

# Configura√ß√µes de binding
bind = "0.0.0.0:8000"  # Escutar em todas as interfaces na porta 8000
backlog = 2048  # Tamanho da fila de conex√µes pendentes

# Configura√ß√µes de workers
workers = 2  # N√∫mero de workers (recomendado: 2-4 para VPS)
worker_class = "uvicorn.workers.UvicornWorker"  # Usar workers do Uvicorn
worker_connections = 1000  # M√°ximo de conex√µes por worker
max_requests = 1000  # Reiniciar worker ap√≥s N requests
max_requests_jitter = 100  # Varia√ß√£o para evitar reinicializa√ß√£o simult√¢nea

# Configura√ß√µes de timeout
timeout = 30  # Timeout para requests
keepalive = 2  # Tempo de keep-alive
graceful_timeout = 30  # Tempo para worker finalizar

# Configura√ß√µes de performance
preload_app = True  # Pr√©-carregar aplica√ß√£o
sendfile = True  # Otimiza√ß√£o para arquivos est√°ticos
max_requests_jitter = 100  # Varia√ß√£o para evitar reinicializa√ß√£o simult√¢nea

# Configura√ß√µes de logging
accesslog = "-"  # Log de acesso no stdout
errorlog = "-"   # Log de erro no stdout
loglevel = "info"  # N√≠vel de log
access_log_format = '%(h)s %(l)s %(u)s %(t)s "%(r)s" %(s)s %(b)s "%(f)s" "%(a)s" %(D)s'

# Configura√ß√µes de seguran√ßa
limit_request_line = 4094  # Tamanho m√°ximo da linha de request
limit_request_fields = 100  # N√∫mero m√°ximo de campos no header
limit_request_field_size = 8190  # Tamanho m√°ximo de cada campo

# Configura√ß√µes de processo
user = None  # Usu√°rio para rodar (ser√° definido pelo systemd)
group = None  # Grupo para rodar (ser√° definido pelo systemd)
tmp_upload_dir = None  # Diret√≥rio tempor√°rio para uploads

# Configura√ß√µes de reload (apenas para desenvolvimento)
reload = False  # N√£o recarregar automaticamente em produ√ß√£o
reload_engine = "auto"  # Engine de reload autom√°tico

# Configura√ß√µes de stats
statsd_host = None  # Host para m√©tricas StatsD
statsd_prefix = "gunicorn"  # Prefixo para m√©tricas

# Configura√ß√µes de check
check_config = False  # Verificar configura√ß√£o ao iniciar

# Configura√ß√µes de SSL (se necess√°rio)
keyfile = None  # Arquivo de chave privada SSL
certfile = None  # Arquivo de certificado SSL

# Configura√ß√µes de proxy
forwarded_allow_ips = "127.0.0.1,::1"  # IPs confi√°veis para headers X-Forwarded-*
proxy_protocol = False  # Usar protocolo de proxy

# Configura√ß√µes de worker
worker_tmp_dir = None  # Diret√≥rio tempor√°rio para workers
worker_exit_on_app_exit = False  # N√£o sair quando app sair

# Configura√ß√µes de signal
worker_int = "INT"  # Sinal para interromper worker
worker_abort = "ABRT"  # Sinal para abortar worker

# Configura√ß√µes de hook
def on_starting(server):
    """Hook executado quando o servidor inicia"""
    server.log.info("üöÄ Iniciando Gunicorn para Moara Faturas")

def on_reload(server):
    """Hook executado quando o servidor recarrega"""
    server.log.info("üîÑ Recarregando Gunicorn")

def when_ready(server):
    """Hook executado quando o servidor est√° pronto"""
    server.log.info("‚úÖ Gunicorn pronto para receber conex√µes")

def worker_int(worker):
    """Hook executado quando um worker √© interrompido"""
    worker.log.info("‚ö†Ô∏è  Worker interrompido")

def worker_abort(worker):
    """Hook executado quando um worker √© abortado"""
    worker.log.info("‚ùå Worker abortado")

def pre_fork(server, worker):
    """Hook executado antes de criar um worker"""
    server.log.info(f"üîÑ Criando worker {worker.pid}")

def post_fork(server, worker):
    """Hook executado ap√≥s criar um worker"""
    server.log.info(f"‚úÖ Worker {worker.pid} criado")

def post_worker_init(worker):
    """Hook executado ap√≥s inicializar um worker"""
    worker.log.info(f"üöÄ Worker {worker.pid} inicializado")

def worker_connect(worker):
    """Hook executado quando um worker se conecta"""
    worker.log.info(f"üîó Worker {worker.pid} conectado")

def worker_disconnect(worker):
    """Hook executado quando um worker se desconecta"""
    worker.log.info(f"üîå Worker {worker.pid} desconectado")

def post_request(worker, req, environ, resp):
    """Hook executado ap√≥s processar um request"""
    worker.log.info(f"üìù Request processado: {req.method} {req.path}")

def on_exit(server):
    """Hook executado quando o servidor sai"""
    server.log.info("üëã Gunicorn finalizado")

# Configura√ß√µes espec√≠ficas para FastAPI
def worker_exit(server, worker):
    """Hook executado quando um worker sai"""
    server.log.info(f"üëã Worker {worker.pid} finalizado")

def pre_exec(server):
    """Hook executado antes de executar o servidor"""
    server.log.info("üöÄ Preparando execu√ß√£o do Gunicorn")

def post_exec(server):
    """Hook executado ap√≥s executar o servidor"""
    server.log.info("‚úÖ Execu√ß√£o do Gunicorn iniciada")

# Configura√ß√µes de health check
def health_check(worker):
    """Verifica√ß√£o de sa√∫de do worker"""
    try:
        # Aqui voc√™ pode adicionar verifica√ß√µes espec√≠ficas
        # Por exemplo, verificar conex√£o com banco, etc.
        return True
    except Exception as e:
        worker.log.error(f"‚ùå Health check falhou: {e}")
        return False

# Configura√ß√µes de m√©tricas
def worker_metrics(worker):
    """M√©tricas do worker"""
    return {
        "pid": worker.pid,
        "age": worker.age,
        "requests": worker.requests,
        "status": "running" if worker.alive else "stopped"
    }

# Configura√ß√µes de debug
def debug_info(server):
    """Informa√ß√µes de debug do servidor"""
    return {
        "bind": server.cfg.bind,
        "workers": server.cfg.workers,
        "worker_class": server.cfg.worker_class,
        "timeout": server.cfg.timeout,
        "max_requests": server.cfg.max_requests
    } 