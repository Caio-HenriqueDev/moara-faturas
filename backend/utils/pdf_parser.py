"""
Parser de PDF para o Sistema de Gest√£o de Faturas
Extrai dados estruturados de faturas de energia em formato PDF
"""

import PyPDF2
import re
from typing import Optional, Dict, Any
from pathlib import Path

def extrair_texto_pdf(path_pdf: str) -> Optional[str]:
    """
    Extrai texto de um arquivo PDF.
    
    Args:
        path_pdf: Caminho para o arquivo PDF
        
    Returns:
        Texto extra√≠do ou None se falhar
    """
    try:
        with open(path_pdf, 'rb') as file:
            pdf_reader = PyPDF2.PdfReader(file)
            texto_total = ""
            
            for page in pdf_reader.pages:
                texto_pagina = page.extract_text()
                if texto_pagina:
                    texto_total += texto_pagina + "\n"
            
            return texto_total
    except Exception as e:
        print(f"‚ùå Erro ao extrair texto do PDF {path_pdf}: {e}")
        return None

def buscar_regex(padrao: str, texto: str, grupo: int = 1, tipo=str) -> Optional[Any]:
    """
    Fun√ß√£o auxiliar para buscar padr√µes regex com convers√£o de tipo.
    
    Args:
        padrao: Padr√£o regex para buscar
        texto: Texto onde buscar
        grupo: Grupo do regex a retornar
        tipo: Tipo para converter o resultado
        
    Returns:
        Valor encontrado convertido para o tipo especificado ou None
    """
    try:
        match = re.search(padrao, texto, re.IGNORECASE)
        if match:
            valor = match.group(grupo).strip()
            if valor:
                return tipo(valor)
        return None
    except (ValueError, TypeError) as e:
        print(f"‚ö†Ô∏è Erro ao converter valor '{valor}' para tipo {tipo.__name__}: {e}")
        return None

def extrair_dados_fatura_pdf(path_pdf: str) -> Optional[Dict[str, Any]]:
    """
    Extrai dados de uma fatura de energia em formato PDF.
    
    Args:
        path_pdf: Caminho para o arquivo PDF
        
    Returns:
        Dicion√°rio com os dados extra√≠dos ou None se falhar
    """
    # Verifica se o arquivo existe
    if not Path(path_pdf).exists():
        print(f"‚ùå Arquivo PDF n√£o encontrado: {path_pdf}")
        return None
    
    # Extrai texto do PDF
    texto_total = extrair_texto_pdf(path_pdf)
    if not texto_total:
        return None
    
    print(f"üìÑ Processando PDF: {Path(path_pdf).name}")
    print(f"üìù Tamanho do texto extra√≠do: {len(texto_total)} caracteres")
    print(f"üìã Primeiros 200 caracteres: {texto_total[:200]}...")
    
    try:
        # Extra√ß√£o de dados via regex com valida√ß√µes
        dados_extraidos = {
            "nome_cliente": buscar_regex(
                r"\n([A-Z\s]{5,})\nMURIAE", 
                texto_total
            ) or buscar_regex(
                r"Cliente[:\s]*([A-Z\s]{5,})", 
                texto_total
            ) or buscar_regex(
                r"([A-Z\s]{5,})\s*-\s*[A-Z\s]+", 
                texto_total
            ) or buscar_regex(
                r"([A-Z][A-Z\s]{4,})", 
                texto_total
            ),
            "mes_referencia": buscar_regex(
                r"(\w+\s*/\s*\d{4})", 
                texto_total
            ) or buscar_regex(
                r"Refer√™ncia[:\s]*(\w+\s*\d{4})", 
                texto_total
            ) or buscar_regex(
                r"(\w+\s+\d{4})", 
                texto_total
            ),
            "data_vencimento": buscar_regex(
                r"(\d{2}/\d{2}/\d{4})", 
                texto_total
            ) or buscar_regex(
                r"Vencimento[:\s]*(\d{2}/\d{2}/\d{4})", 
                texto_total
            ) or buscar_regex(
                r"(\d{2}-\d{2}-\d{4})", 
                texto_total
            ),
            "preco_unitario_com_tributo": buscar_regex(
                r"Consumo em kWh.*?\n.*?([0-9.,]{4,})", 
                texto_total,
                tipo=lambda x: float(x.replace(",", "."))
            ) or buscar_regex(
                r"Pre√ßo[:\s]*R?\$?\s*([0-9.,]{4,})", 
                texto_total,
                tipo=lambda x: float(x.replace(",", "."))
            ) or buscar_regex(
                r"([0-9.,]{4,})\s*R\$", 
                texto_total,
                tipo=lambda x: float(x.replace(",", "."))
            ),
            "quantidade_kwh": buscar_regex(
                r"\b([23][0-9]{2}),00\b", 
                texto_total,
                tipo=lambda x: int(x.replace(",", ""))
            ) or buscar_regex(
                r"Consumo[:\s]*(\d+)\s*kWh", 
                texto_total,
                tipo=int
            ) or buscar_regex(
                r"(\d{3,4})\s*kWh", 
                texto_total,
                tipo=int
            ),
            "numero_instalacao": buscar_regex(
                r"\b(\d{6,8})\b", 
                texto_total
            ) or buscar_regex(
                r"Instala√ß√£o[:\s]*(\d{6,8})", 
                texto_total
            ) or buscar_regex(
                r"(\d{6,8})\s*[A-Z]", 
                texto_total
            ) or buscar_regex(
                r"(\d{6,8})", 
                texto_total
            ),
            "saldo_acumulado_gdii": buscar_regex(
                r"Saldo Acumulado:\s*([\d.,]+)", 
                texto_total,
                tipo=lambda x: float(x.replace(".", "").replace(",", "."))
            ) or buscar_regex(
                r"Saldo[:\s]*([\d.,]+)", 
                texto_total,
                tipo=lambda x: float(x.replace(".", "").replace(",", "."))
            ),
            "documento_cliente": buscar_regex(
                r"CNPJ/CPF/RANI[:\s]*([0-9Xx./-]{11,20})", 
                texto_total
            ) or buscar_regex(
                r"CPF[:\s]*([0-9]{11,14})", 
                texto_total
            ) or buscar_regex(
                r"CNPJ[:\s]*([0-9]{14,18})", 
                texto_total
            ) or buscar_regex(
                r"([0-9]{11,18})", 
                texto_total
            ),
            "email_cliente": buscar_regex(
                r"[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}", 
                texto_total
            ),
        }
        
        # Log dos dados extra√≠dos para debug
        print(f"üîç Dados extra√≠dos:")
        for campo, valor in dados_extraidos.items():
            print(f"   - {campo}: {valor}")
        
        # Valida√ß√£o dos campos obrigat√≥rios
        campos_obrigatorios = [
            "nome_cliente", "numero_instalacao"
        ]
        
        campos_opcionais = [
            "documento_cliente", "mes_referencia", "data_vencimento"
        ]
        
        # Verifica campos obrigat√≥rios
        campos_faltando = [campo for campo in campos_obrigatorios if not dados_extraidos.get(campo)]
        if campos_faltando:
            print(f"‚ùå Campos obrigat√≥rios n√£o encontrados: {campos_faltando}")
            return None
        
        # Para campos opcionais, usa valores padr√£o se n√£o encontrados
        if not dados_extraidos.get("documento_cliente"):
            dados_extraidos["documento_cliente"] = "N/A"
            print("‚ö†Ô∏è Documento do cliente n√£o encontrado, usando 'N/A'")
        
        if not dados_extraidos.get("mes_referencia"):
            dados_extraidos["mes_referencia"] = "N/A"
            print("‚ö†Ô∏è M√™s de refer√™ncia n√£o encontrado, usando 'N/A'")
        
        if not dados_extraidos.get("data_vencimento"):
            dados_extraidos["data_vencimento"] = "N/A"
            print("‚ö†Ô∏è Data de vencimento n√£o encontrada, usando 'N/A'")
        
        # C√°lculo do valor total
        valor_final = None
        if dados_extraidos["preco_unitario_com_tributo"] and dados_extraidos["quantidade_kwh"]:
            # Aplica desconto de 20% (0.8) conforme l√≥gica existente
            preco_com_desconto = dados_extraidos["preco_unitario_com_tributo"] * 0.8
            valor_final = round(preco_com_desconto * dados_extraidos["quantidade_kwh"], 2)
        else:
            # Se n√£o conseguir calcular, usa valor padr√£o
            valor_final = 100.00
            print("‚ö†Ô∏è N√£o foi poss√≠vel calcular o valor total, usando R$ 100,00")
        
        # Constru√ß√£o do dicion√°rio final com valida√ß√µes
        fatura_data = {
            "nome_cliente": dados_extraidos["nome_cliente"],
            "documento_cliente": dados_extraidos["documento_cliente"],
            "email_cliente": dados_extraidos.get("email_cliente", ""),
            "numero_instalacao": dados_extraidos["numero_instalacao"],
            "valor_total": valor_final,
            "mes_referencia": dados_extraidos["mes_referencia"],
            "data_vencimento": dados_extraidos["data_vencimento"],
        }
        
        # Log dos dados extra√≠dos
        print(f"‚úÖ Dados extra√≠dos com sucesso:")
        print(f"   - Cliente: {fatura_data['nome_cliente']}")
        print(f"   - Instala√ß√£o: {fatura_data['numero_instalacao']}")
        print(f"   - Valor: R$ {fatura_data['valor_total']:.2f}")
        print(f"   - Vencimento: {fatura_data['data_vencimento']}")
        
        return fatura_data
        
    except Exception as e:
        print(f"‚ùå Erro inesperado ao processar o PDF {path_pdf}: {e}")
        return None

def extrair_dados_imagem(path_imagem: str) -> Optional[Dict[str, Any]]:
    """
    Extrai dados b√°sicos de uma imagem de fatura.
    Por enquanto, retorna dados padr√£o, mas pode ser expandido com OCR.
    
    Args:
        path_imagem: Caminho para o arquivo de imagem
        
    Returns:
        Dicion√°rio com os dados b√°sicos ou None se falhar
    """
    try:
        # Verifica se o arquivo existe
        if not Path(path_imagem).exists():
            print(f"‚ùå Arquivo de imagem n√£o encontrado: {path_imagem}")
            return None
        
        print(f"üñºÔ∏è Processando imagem: {Path(path_imagem).name}")
        
        # Por enquanto, retorna dados padr√£o
        # TODO: Implementar OCR para extrair dados reais da imagem
        dados_imagem = {
            "nome_cliente": "Cliente da Imagem",
            "documento_cliente": "N/A",
            "email_cliente": "",
            "numero_instalacao": Path(path_imagem).stem[:8], # Usa nome do arquivo
            "valor_total": 100.00,
            "mes_referencia": "N/A",
            "data_vencimento": "N/A",
        }
        
        print(f"‚úÖ Dados b√°sicos extra√≠dos da imagem")
        return dados_imagem
        
    except Exception as e:
        print(f"‚ùå Erro ao processar imagem {path_imagem}: {e}")
        return None


def validar_dados_fatura(dados: Dict[str, Any]) -> bool:
    """
    Valida se os dados extra√≠dos da fatura est√£o completos e corretos.
    
    Args:
        dados: Dicion√°rio com os dados da fatura
        
    Returns:
        True se os dados s√£o v√°lidos, False caso contr√°rio
    """
    if not dados:
        return False
    
    # Campos obrigat√≥rios
    campos_obrigatorios = [
        "nome_cliente", "documento_cliente", "numero_instalacao",
        "valor_total", "mes_referencia", "data_vencimento"
    ]
    
    for campo in campos_obrigatorios:
        if not dados.get(campo):
            print(f"‚ùå Campo obrigat√≥rio faltando: {campo}")
            return False
    
    # Valida√ß√µes espec√≠ficas
    if dados["valor_total"] <= 0:
        print("‚ùå Valor total deve ser maior que zero")
        return False
    
    if len(dados["documento_cliente"]) < 11:
        print("‚ùå Documento do cliente deve ter pelo menos 11 caracteres")
        return False
    
    if len(dados["numero_instalacao"]) < 6:
        print("‚ùå N√∫mero de instala√ß√£o deve ter pelo menos 6 caracteres")
        return False
    
    return True
